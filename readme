Apologies but this file keeps vanishing from Git when I check my code in so I have once again recreated it in my Eclipse project

Salient design assumptions and structure:

Stock items - oranges, cans of coke. Assume they will have attributes that describe things like
- Cost (including unit of supply)
- Simple price (including units of checkout)

Supplier
- name
- address
(could be external or other branch of supermarket)

Cost - cost per unit of supply in specific currency at a specific datetime from a specific supplier in a specific unit

Simple price - cost per unit of checkout in specific currency from datetime to (optional) end datetime

Linked items - composition of several stock items, recursively - will have LinkedDealRules to drive pricing

LinkedDealRules - ordered collection of DealRules denoting in which order deals are to be applied (presumably, best for the customer first but a
supermarket might in fact want to bump up some deals to get rid of stock - called "searchandising" when applied to websites. Legit as 
customers might then get to have this suggested to them as they go round the store)

DealRules - e.g. BNGNF, XForPriceOfY. Need to be able to identify when this is applied to a basket and to return 
set of applicable savings for a receipt. 

Fractional money and rounding rules - this will have to be addressed as intrinsic part of problem domain

Currency conversion tables - I will assume for simplicity that we are operating in a single currency though in the real world this might not be the case for a big supermarket

Audit trails - supported will be
 - accounting ledger posts
 - till logs (receipts)
 - sanitised developer logs
 - error logs
 
 Basket - the shopping basket to which the above set of rules will be applied

Should be able to achieve the following

- cost a basket and show optimum (or at least, approved order of) savings
- further, value an arbitrary set of goods based on both checkout price and supplied price
- thus, work out the profit applicable to that arbitrary set of goods 
- structure the design so that it is possible to work out if the same basket could be obtained cheaper from a different combination of 
suppliers (maximised profit) but not necessarily to do this in first pass
- keep simple audit trail

Still to do 
- refactoring to remove some duplication of concretions in test harness though not so important as in unit test not core code
- more logging, maybe
- unit test for profit on baskets maybe
- could implement deal rules properly (although the structure of the problem is addressed well enough so perhaps no need)
 - not used actors so either use or remove. Probably remove as they would only used be for testing so are not really part of the problem solution here 

Current output of test is :

Beans		 0.50
Beans		 0.50
Beans		 0.50
Coke		 0.70
Coke		 0.70
Oranges		 0.40
-----------
Sub-total		3.30

Savings
Beans 3 for 2		-0.50
Coke 2 for £1		-0.40
			------
Total savings		-0.90
-----------
Total to pay		2.40
Audit log entry will be something like this (though printed to a persistent audit stream somewhere not to stdout):
Log this to the till: <Shopping basket on 01 11 2017 12:51
Beans		 0.50, price in cents is 50
Beans		 0.50, price in cents is 50
Beans		 0.50, price in cents is 50
Coke		 0.70, price in cents is 70
Coke		 0.70, price in cents is 70
Oranges		 0.40, price in cents is 39
>. For now, just print to stdout
